Cho đến nay, chúng tôi chỉ sử dụng hai component, component App là component chính và là bộ chứa chứa state và component Person, một function component chỉ đơn giản là export Person. Với hai component này với nhau, chúng ta có được đầu ra này ở đây. Và không có gì sai với đầu ra này, nó chắc chắn hoạt động tốt. Nhưng tất nhiên đằng sau hậu trường chúng ta vẫn có thể tinh chỉnh điều này một chút. Ví dụ, bạn thường chia App này thành nhiều component hơn thế, Câu hỏi luôn là cái gì nên đi vào component của chính nó và bạn tập hợp cái gì trong một component cao hơn, trong component gốc chẳng hạn. Bây giờ nếu chúng tôi phân tích các component hiện có của chúng tôi, chúng tôi thấy rằng component Person đó khá tập trung, nó hiển thị thẻ của một Person, thông tin của một Person, nó xử lý một nhấp chuột vào thẻ đó. Vì vậy, component này không cần phải chia tách nữa, bạn sẽ đặt gì vào component của chính nó? Bạn có thể thuê ngoài input vào component của chính nó, điều đó có thể hợp lý nếu bạn muốn tạo một component input chung trên ứng dụng của mình, nơi bạn thực sự chỉ thay đổi style. Nhưng nếu đó không phải là mục tiêu, việc đưa input vào component của chính nó sẽ không có ý nghĩa nhiều. Vì vậy, đối với chúng tôi, chúng tôi chắc chắn có thể để nó ở đây. Và tương tự cho các paragraph, nếu bạn muốn tạo một số component trình bao bọc đoạn tùy chỉnh cung cấp cho tất cả các đoạn của bạn một số kiểu dáng và hành vi cụ thể, bạn có thể muốn đưa vào component của chính nó. Nếu đó chỉ là về kiểu dáng toàn cầu, hãy sử dụng biểu định kiểu toàn cầu, tệp index.css và chỉ cần thiết lập kiểu của bạn ở đó. Vì vậy, component Person thực sự đã kết thúc, có lẽ chúng ta không cần phải làm nhiều hơn ở đây. Chúng tôi có thể tách tệp app.js của mình mặc dù chúng tôi đã quản lý để nói rằng chúng tôi thực sự làm rất nhiều thứ ở đó, nếu chúng tôi xem xét phương thức render() của chúng tôi, cuối cùng quyết định component này chịu trách nhiệm render, chúng tôi thấy rằng chúng tôi đã đưa ra một danh sách những Person ở đây nhưng tất nhiên chúng tôi cũng có nút chuyển đổi này. Bây giờ thường là các component chứa như component app.js, vì vậy các component cũng quản lý state không nên tham gia vào render UI quá nhiều. Nói cách khác, phương thức render nên khá nạc và không chứa quá nhiều jsx. Vì vậy, trong khi đó không nhất thiết là cách thực hành tồi tệ nhất để có loại component ứng dụng này, đặc biệt đối với một ứng dụng nhỏ như thế này, chúng tôi vẫn có thể chia thành nhiều component khác. Ví dụ, có thể có ý nghĩa khi tạo một component danh sách Person hoặc component của một Person là cách chúng ta có thể đặt tên cho nó, sau đó chúng ta có thể chuyển mảng Person này vào component này và bên trong component của Person đó, chúng ta sẽ thực hiện ánh xạ và hiển thị danh sách. Điều này sẽ cho phép chúng tôi thuê ngoài tất cả các mã này và cuối cùng, chỉ cần nhập Person vào component của chúng tôi và hiển thị nó nếu showPersons là đúng hoặc không hiển thị mã. Vì vậy, đây là một cải tiến, một cải tiến khác mà chúng tôi có thể làm và tất nhiên là hoàn toàn tùy chọn là thuê ngoài buồng lái của chúng tôi thành component riêng của mình để cuối cùng component ứng dụng của chúng tôi thực sự chỉ có div gói này và sau đó là component buồng lái và component Person . Như mọi khi, đây là tùy chọn, đây là một thông lệ tốt vì nó sẽ làm cho component ứng dụng của chúng tôi tập trung hơn và cung cấp cho chúng tôi các component khác cũng có trọng tâm rõ ràng thay vì có mọi thứ lẫn lộn trong component ứng dụng. Vì vậy, hãy tạo các component mới này, vì trong thư mục nguồn, tôi sẽ tạo một tệp Person, thư mục xin lỗi và trong đó có tệp component person.js. Bây giờ theo ý kiến ​​của tôi, việc chuyển thư mục Person vào thư mục Person cũng hợp lý để có kiểu lồng này bởi vì một Person thực sự chỉ là một yếu tố duy nhất mà chúng ta sắp đưa ra một danh sách trong các component của mọi Person. Điều này là hoàn toàn tùy chọn nhưng có loại cấu trúc này chắc chắn có ý nghĩa, chúng ta có thể cải thiện điều này hơn nữa. Trong thư mục nguồn của chúng tôi, chúng tôi cũng có thể thêm những thứ như thư mục tài sản có chứa hình ảnh hoặc những thứ tương tự, do đó, có thể tạo thư mục component trong thư mục nguồn chứa tất cả các component của chúng tôi như component của Person đó để chúng tôi có thể thấy rõ các component đó đi vào đó, chúng tôi cũng có thể có một thư mục tài sản như tôi đã đề cập có chứa hình ảnh chúng tôi đưa vào và v.v. Chúng tôi cũng có thể có trong thư mục nguồn, thư mục container chứa tất cả các vùng chứa của chúng tôi như app.js và tệp css tương ứng để chúng tôi có thể di chuyển dữ liệu sang thư mục container, cũng di chuyển tệp thử nghiệm đến đó mặc dù chúng tôi chưa làm việc với điều đó chưa Vì vậy, bây giờ chúng tôi đã cấu trúc lại ứng dụng của mình, để chỉ có tệp index.js trực tiếp trong thư mục nguồn sau đó có một danh sách các thùng chứa mà chúng tôi biết và sau đó có một danh sách các component mà chúng tôi biết. Tất nhiên điều này sẽ phá vỡ ứng dụng ngay bây giờ vì tất cả hàng nhập khẩu của chúng tôi đều sai. Vì vậy, mục tiêu bây giờ là sửa chữa các nhập khẩu này trước khi chúng tôi trong các bài giảng tiếp theo tiếp tục làm việc với component Person đó và tôi đã đề cập đến nó trên component buồng lái đó vì vậy cockpit.js. Tôi đoán điều này có ý nghĩa vì vậy chúng ta hãy sửa chữa nhập khẩu trước khi chúng ta tiếp tục với nhu cầu thực tế cho component buồng lái và Person trong bài giảng tiếp theo. Về việc nhập khẩu, trong app.js, chúng tôi cần liên hệ với component cá nhân ngay bây giờ, chúng tôi sẽ sớm xóa nó bằng cách tăng lên một cấp vì sau đó chúng tôi sẽ rời khỏi thư mục container và chúng tôi sẽ quay lại thư mục nguồn và sau khi tăng một cấp, chúng tôi muốn vào thư mục component và ở đó vào thư mục Person và sau đó là Person / Person. Đây sẽ là đường dẫn mới, cách tiếp cận tệp person.js từ tệp app.js. Đường dẫn nhập app.css vẫn đúng vì nó vẫn nằm bên cạnh app.js. Trong tệp index.js, chúng ta cũng cần điều chỉnh việc nhập trỏ vào app.js, ở đó không còn ngồi trong cùng một thư mục, thay vào đó chúng ta cần vào thư mục container và ở đó chúng ta sẽ tìm thấy tệp app.js chúng ta cũng cần điều chỉnh việc nhập này. Và đây là bây giờ, tiếp theo chúng ta cần tạo tệp person.js này và tệp cockpit.js hoặc chúng được tạo ra tất nhiên nhưng chúng ta cần lấp đầy chúng bằng cuộc sống và sau đó chúng ta thực sự có thể thấy cấu trúc component được cải thiện và tập trung.