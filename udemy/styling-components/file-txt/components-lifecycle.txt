Ở đây trong ứng dụng của chúng tôi, hãy bắt đầu với tệp app.js, một thành phần dựa trên lớp và do đó ở đây, chúng ta có quyền truy cập vào móc vòng đời. Bây giờ như tôi đã đề cập, điều đầu tiên sẽ thực thi là hàm tạo. Các nhà xây dựng nhận được một số đạo cụ và khi bạn thêm một constructor như tôi đã đề cập, bạn phải gọi siêu đạo cụ ở đây. Điều này về cơ bản sẽ thực thi hàm tạo của thành phần bạn đang mở rộng và đó là điều quan trọng để đảm bảo rằng mọi thứ sẽ được khởi tạo chính xác và bạn có thể thực hiện những việc như truy cập trạng thái đã đặt này. Bây giờ ở đây, tôi chỉ đơn giản muốn đăng nhập hàm tạo của app.js và tôi chỉ có định danh app.js ở đó mà chúng ta có thể thấy rõ từ tập tin đầu ra này bắt nguồn từ đâu. Bây giờ trong hàm tạo, bạn cũng có thể khởi tạo trạng thái của bạn bằng cách này. Vì vậy, chúng tôi đang làm điều đó ở dưới đó, bạn có thể làm toàn bộ khởi tạo trạng thái cũng ở đây thay vì ở dưới đó. Đây thực sự, đây là một cú pháp hiện đại hơn mà về cơ bản sẽ thêm vào hàm tạo cho bạn, gọi siêu đạo cụ và thiết lập trạng thái trong hàm tạo, đó là những gì cú pháp cũ của chúng tôi, cái này ở đây thực sự làm. Nếu bạn không muốn sử dụng nó hoặc bạn đang làm việc trong một dự án được thiết lập không hỗ trợ hiện đại hơn này Cú pháp Javascript, bạn có thể đặt trạng thái ở đây trong hàm tạo và nó sẽ hoạt động tốt. Quan trọng chỉ là vì bạn khởi tạo trạng thái, bạn nên đặt trạng thái như thế này chứ không phải với trạng thái đã đặt này vì sẽ không có nhà nước để hợp nhất trạng thái này với. Bây giờ sau khi xây dựng, chúng tôi đã học được rằng getDerivingStateFromProps chạy. Cho rằng, Tôi sẽ thêm getDerivingStateFromProps và đây thực sự là một phương thức tĩnh, vì vậy bạn phải thêm từ khóa tĩnh trước nó. Điều này chỉ quan trọng đối với React để React có thể thực hiện điều này một cách chính xác. Bạn sẽ nhận được đạo cụ của bạn và trạng thái của bạn ở đây và bạn nên trả lại trạng thái đã cập nhật của mình và ở đây tôi sẽ trả lại trạng thái cũ nhưng tất nhiên tôi muốn đăng nhập giao diện điều khiển app.js getDerivingStateFromProps và tôi cũng sẽ đăng nhập đạo cụ của mình ở đây. Bây giờ sau getDerivingStateFromProps, phương thức render thực thi, cái này ở đây, vậy hãy để tôi đăng nhập giao diện điều khiển app.js kết xuất và như tôi đã đề cập, sau đó tất cả các thành phần con sẽ được kết xuất. Tất cả mọi người các thành phần sẽ được kết xuất và nếu đó là các thành phần dựa trên lớp, chúng ta cũng có thể thêm vòng đời ở đó và xem nó chạy cho tất cả những người, Tôi sẽ không làm điều đó ngay bây giờ, mặc dù có một điều tôi sẽ làm. Thành phần của con người tôi là thành phần được thực thi ở đây, tôi thực sự sẽ thêm một nhật ký giao diện điều khiển ở đây, hiển thị Person.js vì khi nào thành phần được kết xuất, mặc dù nó là một chức năng, tất nhiên mã ở đây được thực thi, không ở đây trong bản đồ nhưng thực ra bên ngoài nó Vì vậy, hãy bọc cái này bằng dấu ngoặc nhọn, sau đó thêm từ khóa return vào đây và sau đó thêm phần đóng cú đúp sau này để chúng ta có một cơ thể chức năng thực sự ở đây và bây giờ tôi chỉ muốn chỉ ra rằng Person.js đang kết xuất. Một lần nữa, tất nhiên chúng ta có thể thêm điều này vào đây bởi vì chức năng này sẽ là được thực thi khi kết xuất này và do đó nhật ký giao diện điều khiển này cũng sẽ được in và trong tệp person.js để chúng ta cũng có thể thấy điều đó ở đây tôi cũng sẽ thêm nhật ký giao diện điều khiển, kết xuất person.js. Vì vậy, bây giờ tôi thay đổi điều này, bây giờ trở lại trong app.js, kết xuất sẽ thực thi, thành phần người sẽ kết xuất, các thành phần cá nhân Sau đó, thành phần người sẽ kết xuất và một khi tất cả điều đó được thực hiện, thành phầnDidMount sẽ chạy, vì vậy ở đây tôi sẽ thêm thành phầnDidMount. thành phầnDidMount sẽ cho phép chúng tôi thực hiện một yêu cầu HTTP cho ví dụ và đó là điều chúng tôi sẽ làm sau, bây giờ tôi sẽ chỉ xuất thành phầnDidMount tại đây. Và Bây giờ với tất cả các công việc thiết lập, chúng ta hãy xem nó trong thực tế. Vì vậy, ở đây nếu tôi mở bảng điều khiển của mình và tôi tải lại trang này, chúng ta có thể thấy rõ hàm tạo, chúng ta thấy getDerivingStateFromProps và chúng tôi thấy rằng đạo cụ là một đối tượng với tiêu đề ứng dụng, chúng tôi thấy kết xuất và sau đó chúng tôi xem thành phầnDidMount. Chúng ta không thấy kết quả đầu ra từ các thành phần người vì chúng chưa được kết xuất, phải không? Nếu tôi chuyển đổi, thì chúng ta sẽ thấy việc bật tắt thực sự cũng đã kích hoạt getDerivingStateFromProps và sau đó kết xuất cho app.js đã chạy, kết xuất cho một person.js đã chạy và sau đó ba lần kết xuất trong person.js chạy. Vì vậy, đó là cách móc vòng đời hoạt động ở đây, đây là cách chúng ta có thể đi qua các móc vòng đời khác nhau khi một thành phần được tạo. Cũng đáng nhấn mạnh rằng trong lịch sử, cũng có những cái móc khác và chúng vẫn còn được hỗ trợ và tôi thực sự sẽ sử dụng một trong số chúng sau này trong khóa học. Bây giờ một trong số họ là thành phầnWillMount và tôi đang nói rằng mặc dù nó vẫn tồn tại bởi vì trong khi bạn co thể sử dụng no, nó không an toàn và không có gì như vậy những cái móc này rất hiếm khi được sử dụng và có thể được sử dụng không chính xác và do đó chúng sẽ bị xóa trong tương lai. Như tôi đã đề cập, bạn vẫn có thể sử dụng chúng, không có gì sai với điều đó nói chung và vì vậy ở đây tôi sẽ thực hiện thành phầnWillMount. Điều đó đã được thực thi ngay trước khi thành phầnWouldMount và thực sự rất khó để giải thích loại công việc bạn làm ở đây, nói chung nó sẽ giống như chuẩn bị trạng thái của bạn một cách chính xác và đó là điều bạn sẽ làm bây giờ hãy làm trong getDerivingStateFromProps và cả hai thực sự ít khi được sử dụng và do đó cái này sẽ được gỡ bỏ và cái này ở đây vẫn còn đó và sẽ ở đây nhưng thực tế bạn cũng sẽ không sử dụng nó quá thường xuyên. Bây giờ bên cạnh thành phầnWillMount vẫn còn đó nhưng nó sẽ bị xóa tại một thời điểm nào đó trong tương lai, chúng tôi cũng có một số móc nối khác sẽ chỉ trở nên quan trọng khi chúng tôi xem xét vòng đời cập nhật cho các thành phần. Bây giờ, việc truy cập phương thức kết xuất không có nghĩa là DOM thực được kết xuất lại, điều đó chỉ có nghĩa là React sẽ kết xuất lại DOM ảo bên trong của nó và sau đó kiểm tra xem DOM thực cần phải được thay đổi và đó cũng là một cái gì đó Tôi sẽ đi sâu vào với bạn trong mô-đun này, nơi tôi sẽ tìm hiểu sâu hơn một chút về cách React thực sự cập nhật DOM.