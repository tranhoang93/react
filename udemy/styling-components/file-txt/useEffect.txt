Bây giờ useEffect có thể khó sử dụng bởi vì ngay bây giờ, nó chạy mọi lúc, nó kết hợp componentDidMount và componentDidUpdate. Bây giờ nếu chúng ta gửi HTTP request ở đây thì sao nhưng chúng ta chỉ muốn làm điều đó khi component được render lần đầu tiên và không phải cho mỗi chu kỳ render lại, chúng ta sẽ làm gì sau đó Để làm nổi bật vấn đề này, hãy thêm một cuộc gọi hết thời gian đã đặt ở đây và có thể thêm thời gian chờ là một giây và sau một giây, chức năng này sẽ thực thi và tôi chỉ làm điều này để loại một HTTP request giả ở đây. Tất nhiên đây không phải là HTTP request nhưng phải mất một thời gian để hoàn thành và sau đó thực hiện một cái gì đó và những gì nó Có phải ở đây là nó sẽ đưa ra một alert('saved data to cloud'). Bây giờ chúng tôi có thể ổn với cảnh báo đó hiển thị khi chúng tôi thực sự lưu thứ gì đó vào đám mây, vì vậy khi component này được tải chẳng hạn hoặc có thể chúng tôi đã lấy dữ liệu từ đám mây, không thành vấn đề. Vì vậy, chúng tôi sẽ ổn khi thấy điều này nếu chúng tôi tải lại, đồng ý và bây giờ tôi bấm vào đây và vâng, tôi lại nhận được điều này, cảm ơn bạn. Và tôi bấm vào đây và tôi muốn xóa một cái gì đó và tôi nhận lại nó. Bây giờ điều này có thể không phải là những gì tôi muốn, Làm thế nào tôi có thể kiểm soát khi điều này thực sự thực thi? Ví dụ: giả sử điều này chỉ nên thực hiện vì nó đang lưu dữ liệu lên đám mây khi người của chúng ta thay đổi nhưng không phải với bất kỳ điều kiện nào khác. Vâng, bạn có thể thêm một đối số thứ hai của useEffect ở đây, đối số thứ hai đó là một mảng trong đó bạn chỉ cần trỏ vào tất cả các biến hoặc tất cả dữ liệu thực sự được sử dụng trong hiệu ứng của bạn. Ngay bây giờ React không đủ thông minh để tự mình tìm hiểu và thực sự ở đây không thể vì chúng tôi không sử dụng bất kỳ dữ liệu nào ở đây nhưng nếu chúng ta biết, chúng ta chỉ muốn chạy mã này khi người của chúng ta thay đổi, tốt, sau đó bạn chỉ cần thêm người đạo cụ ở đây. Bây giờ, nếu bạn có các hiệu ứng khác nhau phụ thuộc vào dữ liệu khác nhau, bạn có thể sử dụng useEffect nhiều hơn hơn một lần, điều đó hoàn toàn tốt bạn có thể có nhiều thiết lập useEffect ở đây hoặc các chức năng như bạn muốn. Vì vậy, bây giờ hiệu ứng này chỉ nên thực hiện khi người của chúng ta thay đổi. Vì vậy, nếu tôi tải lại cái này, nó sẽ chạy ban đầu và nếu tôi chuyển đổi người của tôi Bây giờ, không có cảnh báo bởi vì mọi người đã không thay đổi. Nếu tôi gõ I, tất nhiên tôi sẽ lấy lại vì điều đó thay đổi con người của tôi. Nếu tôi chuyển đổi người, nó sẽ không trở lại vì điều đó đã không thay đổi người của tôi. Vì vậy, đó đã là một cải tiến, nó cho phép chúng ta kiểm soát khi điều này thực thi rất hữu ích. Điều gì sẽ xảy ra nếu bây giờ chúng ta chỉ muốn thực hiện điều này khi component render lại lần đầu tiên? Đối với điều này, có một phím tắt nhỏ để nói, bạn có thể vượt qua một mảng trống, bạn phải vượt qua một mảng, điều đó quan trọng nhưng nó trống rỗng. Điều này cho React hiệu ứng này không có phụ thuộc và nó sẽ chạy lại bất cứ khi nào một trong các phụ thuộc thay đổi. Bây giờ nếu bạn không có phụ thuộc, chúng không bao giờ có thể thay đổi và do đó, điều này không bao giờ có thể chạy lại, nó sẽ chạy lần đầu tiên đó là mặc định nhưng nó sẽ không bao giờ chạy lại Vì vậy, bây giờ do đó, chúng tôi có được điều này ban đầu nhưng sau đó chúng tôi có thể làm bất cứ điều gì chúng tôi muốn và điều này không quay trở lại. Vì vậy, nếu bạn chỉ cần componentDidMount, bạn sẽ sử dụng useEffect với một mảng trống được truyền dưới dạng giây đối số cho hàm useEffect. Nếu bạn có sự phụ thuộc vào một lĩnh vực nhất định, bạn sẽ làm những gì chúng tôi đã làm trước đó, bạn vượt qua lĩnh vực đó ở đây và tất nhiên, bạn có thể có nhiều lĩnh vực bạn sẽ phụ thuộc vào.