Có một cái gì đó tôi muốn thêm vào các bài giảng nơi chúng tôi đã làm việc với shouldComponentUpdate. Nếu bạn đang có một class-based component, một component được tạo bằng từ khóa class extends component, nơi bạn triển khai shouldComponentUpdate, nếu bạn thực hiện một kiểm tra trong đó bạn chỉ muốn so sánh tất cả các props quan trọng với một thành phần để tìm sự khác biệt, thì có một cách dễ dàng hơn để viết thành phần đó. Hãy để tôi chứng minh điều này tại ví dụ về thành phần người. Hiện tại tôi đang kiểm tra xem người thay đổi. Bây giờ hãy xem những props mà chúng ta đang sử dụng ở người. Chúng tôi không chỉ sử dụng dữ liệu cá nhân, vì vậy chúng tôi không chỉ sử dụng người từ các props của mình, chúng tôi còn có chức năng changed mà chúng tôi kích hoạt và chức năng clicked. Bây giờ đây là các hàm không phải dữ liệu chúng ta xuất ra, nhưng nếu tham chiếu hàm như vậy sẽ thay đổi, nếu chúng ta bằng cách nào đó có được tham chiếu hàm mới từ bên ngoài, thì thành phần này sẽ cần phải biết về điều đó và nó sẽ cập nhật một cách thích hợp. Do đó, bạn có thể lập luận rằng chúng tôi muốn cập nhật thông tin này nếu kiểm tra ở đây để kiểm tra xem người khác có khác không hoặc nếu props tiếp theo thay đổi khác với props này đã thay đổi, đề cập đến chức năng đã thay đổi đó hoặc nếu props tiếp theo được nhấp, thì ý tôi là thuộc tính này ở đây , khác với giá trị được nhấp hiện tại của chúng tôi, vì vậy nếu nó không bằng với props được nhấp này. Vì vậy, bây giờ tôi đã thêm hai cái mới này nếu séc và nếu bất kỳ cái nào trong số chúng về cơ bản trả về đúng, vì vậy nếu có gì đó thay đổi ở đây, thì chúng tôi sẽ tiếp tục cập nhật, nếu không thay đổi hay nhấp chuột, chúng tôi sẽ trả về sai và chúng tôi không trả lời sai tiếp tục. Bây giờ với điều đó nếu tôi lưu nó, nếu tôi chuyển đổi người của mình ở đây và sau đó tôi gỡ bỏ buồng lái, bạn sẽ thấy rằng trong con người của chúng tôi, chúng tôi vẫn dừng lại ở shouldComponentUpdate vì không có gì thay đổi về điều đó, tuy nhiên tôi vẫn tiếp tục với cập nhật, để hoạt động như trước. Bây giờ nếu bạn có một kịch bản như vậy trong đó bạn kiểm tra tất cả các props của một thành phần nhất định để biết các thay đổi, điều đó không phải là hiếm vì dĩ nhiên bạn muốn chắc chắn rằng không có props nào của thành phần này thay đổi và bạn không chỉ quan tâm đến một hoặc hai trong số các thuộc tính bạn đang nhận, vì vậy nếu bạn đang kiểm tra tất cả các thuộc tính, thì bạn cũng không thể sử dụng shouldComponentUpdate và do đó tôi sẽ nhận xét điều này mà thay vào đó mở rộng một loại thành phần khác, bạn có thể mở rộng một thành phần thuần túy. Vì vậy, sau đó bạn có thể mở rộng thành phần thuần túy ở đây và thành phần thuần túy nào hoạt động như trước đây, tôi có thể nhập vào đây và bạn thấy những người cập nhật vòng đời chạy nhưng nếu tôi gỡ bỏ buồng lái, chúng tôi sẽ không thực thi bất kỳ mã nào từ người, thậm chí không shouldComponentUpdate vì tôi đã nhận xét rằng nhưng cũng không có móc vòng đời nào khác bởi vì thành phần thuần túy cuối cùng chỉ là một thành phần bình thường đã thực hiện shouldComponentUpdate với kiểm tra props hoàn chỉnh, để kiểm tra mọi thay đổi trong bất kỳ chỗ dựa nào của thành phần đó. Vì vậy, nếu đó là những gì bạn cần, bạn cũng có thể chỉ cần sử dụng thành phần thuần túy thay vì thực hiện kiểm tra thủ công shouldComponentUpdate này. Kết quả sẽ giống nhau, vì vậy bạn có thể thực hiện một trong hai cách này nhưng tất nhiên bạn có thể lưu một số mã nếu bạn sử dụng thành phần thuần túy.