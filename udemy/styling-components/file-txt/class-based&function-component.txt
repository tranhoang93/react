Với các functional components và class-based, điều quan trọng là phải hiểu loại components nào có thể làm những gì, lịch sử của họ là gì và tương lai của họ là gì. Vì vậy, các class-based components, với điều đó tôi chỉ đơn giản là các components mở rộng đối tượng components đó chúng ta có thể nhập từ gói React và các functional components chỉ đơn giản là các function có props và return một số code JSX. Bây giờ các components này làm khác nhau khi nói đến việc quản lý state và một thứ gọi là lifecycle hooks mà chúng ta chưa từng thấy nhưng chúng ta sẽ đi sâu vào phần này. Các class-based components có thể truy cập state và chúng có thể thay đổi với setState và họ cũng có thể sử dụng các lifecycle hooks này như bạn sẽ học. functional components, Có một chút khó khăn. Trong quá khứ trước khi React hooks được giới thiệu, chúng không thể quản lý state nhưng vì React hook được giới thiệu, chúng có thể với  useState hook. Vì vậy, truy cập vào state là thực sự có thể nhưng lifecycle hooks vẫn không được hỗ trợ. Các functional components mạnh hơn nhiều so với trước đây và do đó, sự khác biệt giữa các class-based components và các functional components ít hơn so với trước đây thì, là, bị, ở. Điều quan trọng cần lưu ý mặc dù không phải mọi dự án React mà bạn có thể đang làm sẽ sử dụng phiên bản mới nhất của React và do đó, điều quan trọng là phải nhận thức được thực tế rằng trong lịch sử,việc quản lý state  chỉ có thể được thực hiện trong các class-based components và do đó bạn phải chuyển đổi các components cho các class-based components nếu bạn muốn truy cập state. Và thực sự trong khóa học này, Tôi sẽ có sự phân chia đó trong đó tất cả các components nơi tôi sử dụng state là class-based và chỉ về cuối hoặc sau đó xuống khóa học, Tôi cũng sẽ chỉ cho bạn cách chuyển đổi toàn bộ dự án khóa học mà chúng tôi sẽ xây dựng thành cách tiếp cận hook-based đơn giản bởi vì phần lớn các dự án vẫn sử dụng cách tiếp cận class-based đó và tôi muốn bạn học cả hai cách tiếp cận. Bây giờ liên quan đến cách chúng ta truy cập state và cả props, điều quan trọng cần biết là trong các class-based components, bạn cần từ khóa this vì state và props là thuộc tính của class-based components và chúng tôi chưa từng sử dụng this.props, chúng tôi sẽ làm như vậy trong video này nhưng hãy nhớ rằng, bạn cần từ khóa this ở đó. Trong các functional components, bạn lấy props làm đối số và do đó bạn chỉ có thể sử dụng nó như thế này, như một biến bình thường trong function của bạn. Vậy khi nào bạn nên sử dụng cái gì? Khi bạn đang sử dụng phiên bản React không hỗ trợ React hook, đáp án đơn giản. Khi bạn đang làm việc với state hoặc bạn cần lifecycle hooks, hãy sử dụng phương pháp tiếp cận class-based. Nếu bạn đang ở trong một dự án sử dụng React hooks, nó sẽ không đơn giản. Bạn có thể chỉ muốn sử dụng các functional components nhưng vì chúng tôi sẽ thực hiện khóa học này, bạn vẫn có thể chia nhỏ nó có một sự tách biệt rõ ràng giữa các components có liên quan đến quản lý state và các components không phải và tối ưu để có càng nhiều components chỉ mang tính trình bày càng tốt, điều này có thể giúp bạn dễ dàng giữ sự tách biệt giữa các components state và state. Vì vậy, sử dụng class-based components nếu bạn cần quản lý state hoặc truy cập vào lifecycle hooks và bạn không muốn hoặc bạn không thể sử dụng React hook, sử dụng các functional components trong tất cả các trường hợp khác. Vì vậy, nếu bạn có thể sử dụng React hooks và bạn sử dụng đúng phiên bản React và bạn muốn sử dụng nó, hãy sử dụng functional components và thực hiện quản lý state của bạn ở đó và bạn sẽ tìm hiểu những gì thay thế lifecycle hooks trong mô-đun này quá. Nếu bạn đang sử dụng phiên bản cũ hơn của React, thì hãy sử dụng các functional components cho tất cả các trình bày của bạn các components, vì vậy tất cả các components chỉ nhận đầu vào, props và không cần quản lý state. Bây giờ liên quan đến rằng state này và điều props này, Tôi đã không thực sự cho bạn thấy những gì tôi có nghĩa là điều đó. Hiện nay cho đến nay chúng tôi chỉ truy cập state này ở đây trong tệp app.js, chúng tôi truy cập state này để chuyển state của chúng tôi đến components Cockpit chẳng hạn. Bây giờ tệp app.js ở đây chỉ đơn giản là không nhận được bất kỳ props nào hoặc components App không nhận được bất kỳ props nào nhưng chúng ta có thể thay đổi điều này trong tệp index.js của chúng tôi, tất nhiên chúng ta có thể gửi một chỗ dựa vào components App của mình chỉ bằng cách đặt nó ở đây, ví dụ App title của chúng tôi, App title của chúng tôi. Đó có thể là người quản lý cá nhân của chúng tôi bởi vì chúng tôi rõ ràng quản lý một số Person, vì vậy tôi đang gửi chuỗi này trên tựa đề App vào components App của mình và bây giờ nếu tôi muốn sử dụng nó trong đó, tôi cần sử dụng từ khóa this. Vì vậy, trong app.js, bây giờ tôi có thể sử dụng chống đỡ bất cứ nơi nào ở đây nhưng tôi thực sự muốn chuyển tiếp nó đến Cockpit. Vì vậy, ở đó, tôi sẽ thêm một props và bạn có thể đặt tên cho props này bất cứ điều gì bạn muốn và nếu bây giờ tôi muốn truy cập vào state của components App này, tôi sẽ thực hiện điều này trên props này và sau đó, đó là App title, đó là tên của props mà tôi đặt trong tệp index.js và ở đây tôi chỉ chuyển nó qua Cockpit. Vì vậy, trong Cockpit nếu tôi đến đó, bây giờ tôi sẽ có state title mới mà tôi có thể sử dụng để xuất ra title ở dưới đó, Vì vậy, thay vì Hi Tôi là một React App, giờ tôi sẽ xuất ra props.title và ở đây chỉ là props.title bởi vì đây không phải là một class, do đó chúng ta không cần sử dụng nó để truy cập các props. Điều quan trọng là phải giữ sự khác biệt đó trong tâm trí. Với điều đó, nếu chúng tôi quay lại App của mình, chúng tôi sẽ thấy người quản lý ở đó. Phần còn lại hoạt động như nó đã làm trước.